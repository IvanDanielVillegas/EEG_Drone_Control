# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Gui_final.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from pyparrot.Minidrone import Mambo
import sys
import random
from pyOpenBCI import OpenBCICyton
import threading
import time
import numpy as np
from scipy import signal
from pyqtgraph import PlotWidget
import os
from scipy.signal import butter, sosfilt, sosfreqz
from threading import Lock, Thread
import datetime
import plotly.graph_objects as go
import subprocess


import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

import tensorflow as tf
import tensorflow.keras as keras
from tensorflow.keras import layers
from keras.models import Model
from keras.callbacks import ModelCheckpoint
from keras.layers import Input, Dense
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn import preprocessing


########################################################
############## Variables globales ######################
data = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
SCALE_FACTOR = (4500000)/24/(2**23-1) #From the pyOpenBCI repo
colors = 'bbbbbbbb'
i = 0
s = 0
m = 0
t = 0
fila = 0 
stm =0
inittimer = False
prueba = 0
LowF = 8
HighF =13
features=[]
datafilt=[]
switch = 0
altura = 0

########################################################
################ Modelo IA Keras #######################

input_shape = (625,16)
inputs = keras.layers.Input(input_shape)
x = keras.layers.Conv1D(16, 250, activation='relu',input_shape=input_shape)(inputs)
x = keras.layers.MaxPool1D(pool_size=2, strides = 2, padding = 'same')(x)
x = keras.layers.Conv1D(16, 80, activation='relu',input_shape=input_shape)(x)
x = keras.layers.MaxPool1D(pool_size=2, strides = 2, padding = 'same')(x)
x = keras.layers.Flatten()(x)
x = keras.layers.Dense(256,activation = 'relu')(x)
x = keras.layers.Dropout(0.2)(x)
outputs = keras.layers.Dense(units=4, activation= 'softmax')(x)

model = keras.Model(inputs = inputs, outputs=outputs, name ='model_sing')

model.compile(optimizer = 'adam' , loss = 'sparse_categorical_crossentropy' , metrics = ['accuracy'])
model.load_weights('pesosI80.h5') ### Cargar los pesos



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_drone = QtWidgets.QLabel(self.centralwidget)
        self.label_drone.setGeometry(QtCore.QRect(230, 270, 561, 221))
        self.label_drone.setStyleSheet("border-image: url(:/drone/Parrot-Mambo.jpg);")
        self.label_drone.setText("")
        self.label_drone.setObjectName("label_drone")
        self.label_cejas = QtWidgets.QLabel(self.centralwidget)
        self.label_cejas.setGeometry(QtCore.QRect(30, 40, 161, 41))
        self.label_cejas.setStyleSheet("border-image: url(:/cejas/Cejas.jpg);")
        self.label_cejas.setText("")
        self.label_cejas.setObjectName("label_cejas")
        self.label_ojos = QtWidgets.QLabel(self.centralwidget)
        self.label_ojos.setGeometry(QtCore.QRect(420, 40, 161, 41))
        self.label_ojos.setStyleSheet("border-image: url(:/ojos/ojos.jpg);")
        self.label_ojos.setText("")
        self.label_ojos.setObjectName("label_ojos")
        self.label_Pu_bla_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_Pu_bla_1.setGeometry(QtCore.QRect(70, 200, 31, 31))
        self.label_Pu_bla_1.setStyleSheet("border-image: url(:/punto_blanco/punto_blanco.jpg);")
        self.label_Pu_bla_1.setText("")
        self.label_Pu_bla_1.setObjectName("label_Pu_bla_1")
        self.label_Pu_ver_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_Pu_ver_1.setGeometry(QtCore.QRect(110, 200, 31, 31))
        self.label_Pu_ver_1.setStyleSheet("border-image: url(:/punto_verde/punto_verde.jpg);")
        self.label_Pu_ver_1.setText("")
        self.label_Pu_ver_1.setObjectName("label_Pu_ver_1")
        self.label_Pu_bla_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_Pu_bla_2.setGeometry(QtCore.QRect(70, 320, 31, 31))
        self.label_Pu_bla_2.setStyleSheet("border-image: url(:/punto_blanco/punto_blanco.jpg);")
        self.label_Pu_bla_2.setText("")
        self.label_Pu_bla_2.setObjectName("label_Pu_bla_2")
        self.label_Pu_ver_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_Pu_ver_2.setGeometry(QtCore.QRect(110, 320, 31, 31))
        self.label_Pu_ver_2.setStyleSheet("border-image: url(:/punto_verde/punto_verde.jpg);")
        self.label_Pu_ver_2.setText("")
        self.label_Pu_ver_2.setObjectName("label_Pu_ver_2")
        self.label_Pu_bla_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_Pu_bla_3.setGeometry(QtCore.QRect(70, 450, 31, 31))
        self.label_Pu_bla_3.setStyleSheet("border-image: url(:/punto_blanco/punto_blanco.jpg);")
        self.label_Pu_bla_3.setText("")
        self.label_Pu_bla_3.setObjectName("label_Pu_bla_3")
        self.label_Pu_ver_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_Pu_ver_3.setGeometry(QtCore.QRect(110, 450, 31, 31))
        self.label_Pu_ver_3.setStyleSheet("border-image: url(:/punto_verde/punto_verde.jpg);")
        self.label_Pu_ver_3.setText("")
        self.label_Pu_ver_3.setObjectName("label_Pu_ver_3")
        self.label_altura = QtWidgets.QLabel(self.centralwidget)
        self.label_altura.setGeometry(QtCore.QRect(60, 160, 101, 41))
        self.label_altura.setObjectName("label_altura")
        self.label_frontal = QtWidgets.QLabel(self.centralwidget)
        self.label_frontal.setGeometry(QtCore.QRect(50, 280, 121, 31))
        self.label_frontal.setObjectName("label_frontal")
        self.label_lateral = QtWidgets.QLabel(self.centralwidget)
        self.label_lateral.setGeometry(QtCore.QRect(50, 400, 111, 31))
        self.label_lateral.setObjectName("label_lateral")
        self.label_desc_cejas = QtWidgets.QLabel(self.centralwidget)
        self.label_desc_cejas.setGeometry(QtCore.QRect(30, 80, 161, 41))
        self.label_desc_cejas.setObjectName("label_desc_cejas")
        self.label_desc_izq_alt = QtWidgets.QLabel(self.centralwidget)
        self.label_desc_izq_alt.setGeometry(QtCore.QRect(380, 90, 121, 41))
        self.label_desc_izq_alt.setObjectName("label_desc_izq_alt")
        self.label_desc_der_alt = QtWidgets.QLabel(self.centralwidget)
        self.label_desc_der_alt.setGeometry(QtCore.QRect(510, 90, 111, 41))
        self.label_desc_der_alt.setObjectName("label_desc_der_alt")
        self.label_desc_izq_fron = QtWidgets.QLabel(self.centralwidget)
        self.label_desc_izq_fron.setGeometry(QtCore.QRect(360, 130, 141, 41))
        self.label_desc_izq_fron.setObjectName("label_desc_izq_fron")
        self.label_desc_der_fron = QtWidgets.QLabel(self.centralwidget)
        self.label_desc_der_fron.setGeometry(QtCore.QRect(510, 130, 151, 41))
        self.label_desc_der_fron.setObjectName("label_desc_der_fron")
        self.label_desc_izq_lat = QtWidgets.QLabel(self.centralwidget)
        self.label_desc_izq_lat.setGeometry(QtCore.QRect(360, 170, 141, 41))
        self.label_desc_izq_lat.setObjectName("label_desc_izq_lat")
        self.label_desc_der_lat = QtWidgets.QLabel(self.centralwidget)
        self.label_desc_der_lat.setGeometry(QtCore.QRect(510, 170, 141, 41))
        self.label_desc_der_lat.setObjectName("label_desc_der_lat")
        self.label_arriba = QtWidgets.QLabel(self.centralwidget)
        self.label_arriba.setGeometry(QtCore.QRect(490, 210, 47, 61))
        self.label_arriba.setStyleSheet("border-image: url(:/arriba/arriba.png);")
        self.label_arriba.setObjectName("label_arriba")
        self.label_atras = QtWidgets.QLabel(self.centralwidget)
        self.label_atras.setGeometry(QtCore.QRect(486, 292, 51, 21))
        self.label_atras.setStyleSheet("border-image: url(:/atras/atras.png);")
        self.label_atras.setText("")
        self.label_atras.setObjectName("label_atras")
        self.label_frente = QtWidgets.QLabel(self.centralwidget)
        self.label_frente.setGeometry(QtCore.QRect(490, 430, 47, 21))
        self.label_frente.setStyleSheet("border-image: url(:/adelante/frente.png);")
        self.label_frente.setText("")
        self.label_frente.setObjectName("label_frente")
        self.label_abajo = QtWidgets.QLabel(self.centralwidget)
        self.label_abajo.setGeometry(QtCore.QRect(490, 480, 47, 81))
        self.label_abajo.setStyleSheet("border-image: url(:/abajo/abajo.png);")
        self.label_abajo.setText("")
        self.label_abajo.setObjectName("label_abajo")
        self.label_izquierdo = QtWidgets.QLabel(self.centralwidget)
        self.label_izquierdo.setGeometry(QtCore.QRect(200, 330, 101, 41))
        self.label_izquierdo.setStyleSheet("border-image: url(:/izquierda/izquierda.png);")
        self.label_izquierdo.setText("")
        self.label_izquierdo.setObjectName("label_izquierdo")
        self.label_derecha = QtWidgets.QLabel(self.centralwidget)
        self.label_derecha.setGeometry(QtCore.QRect(700, 340, 91, 41))
        self.label_derecha.setStyleSheet("border-image: url(:/derecha/derecha.png);")
        self.label_derecha.setText("")
        self.label_derecha.setObjectName("label_derecha")
        self.label_errores = QtWidgets.QLabel(self.centralwidget)
        self.label_errores.setGeometry(QtCore.QRect(250, 0, 341, 21))
        self.label_errores.setObjectName("label_errores")
        self.button_send = QtWidgets.QPushButton(self.centralwidget)
        self.button_send.setGeometry(QtCore.QRect(20, 510, 93, 28))
        self.button_send.setObjectName("button_send")
        self.line_address = QtWidgets.QLineEdit(self.centralwidget)
        self.line_address.setGeometry(QtCore.QRect(120, 511, 201, 31))
        self.line_address.setObjectName("line_address")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_altura.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">ALTURA</span></p></body></html>"))
        self.label_frontal.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">FRONTAL</span></p></body></html>"))
        self.label_lateral.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">LATERAL</span></p></body></html>"))
        self.label_desc_cejas.setText(_translate("MainWindow", "<html><head/><body><p align=\"justify\">Levantar las cejas para cambiar<br/>las opciones de movimiento</p></body></html>"))
        self.label_desc_izq_alt.setText(_translate("MainWindow", "<html><head/><body><p>Cerrar el ojo izquierdo <br/>para bajar el drone</p></body></html>"))
        self.label_desc_der_alt.setText(_translate("MainWindow", "<html><head/><body><p>Cerrar el ojo derecho<br/>para elevar el drone</p></body></html>"))
        self.label_desc_izq_fron.setText(_translate("MainWindow", "<html><head/><body><p>Cerrar el ojo izquierdo para<br/>mover el drone hacia atras</p></body></html>"))
        self.label_desc_der_fron.setText(_translate("MainWindow", "<html><head/><body><p>Cerrar el ojo izquierdo para<br/>mover el drone hacia el frente</p></body></html>"))
        self.label_desc_izq_lat.setText(_translate("MainWindow", "<html><head/><body><p>Cerrar el ojo izquierdo para<br/>mover el drone a la izquierda</p></body></html>"))
        self.label_desc_der_lat.setText(_translate("MainWindow", "<html><head/><body><p>Cerrar el ojo izquierdo para<br/>mover el drone a la derecha</p></body></html>"))
        self.label_arriba.setText(_translate("MainWindow", "<html><head/><body><p><br/></p><p><br/></p></body></html>"))
        self.label_errores.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" color:#ff0000;\">Errores</span></p><p align=\"center\"><br/></p></body></html>"))
        self.button_send.setText(_translate("MainWindow", "Enviar e iniciar"))
        self.line_address.setText(_translate("MainWindow", "Ingrese la dirección del drone"))

        ##########################################################
################### Control del drone ####################


    def Izquierdo(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            mambo.fly_direct(roll=10, pitch=0, yaw=0, vertical_movement=0, duration=1)
            mambo.smart_sleep(1)
            mambo.hover()
            
    def Adelante(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            mambo.fly_direct(roll=0, pitch=10, yaw=0, vertical_movement=0, duration=1)
            mambo.smart_sleep(1)
            mambo.hover()
    
    def Derecho(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            mambo.fly_direct(roll=-10, pitch=0, yaw=0, vertical_movement=0, duration=1)
            mambo.smart_sleep(1)
            mambo.hover()
            
    def Atras(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            mambo.fly_direct(roll=0, pitch=-10, yaw=0, vertical_movement=0, duration=1)
            mambo.smart_sleep(1)
            mambo.hover()
            
    def Despegar(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            print("taking off!")
            mambo.safe_takeoff(5)
            mambo.hover()
            
    def Aterrizar(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            print("landing")
            mambo.safe_land(5)
            mambo.disconnect()
            print("disconnect")
        
    def Arriba(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            mambo.fly_direct(roll=0, pitch=0, yaw=0, vertical_movement=10, duration=1)
        
    def Abajo(self):
        if (mambo.sensors.flying_state != "emergency"):
            print(mambo.sensors.flying_state)
            mambo.fly_direct(roll=0, pitch=0, yaw=0, vertical_movement=-10, duration=1)

################################################################################################    
################################################################################################
    def save_data_EEG(self, sample):
            global data , fila , inittimer
            data.append([i*SCALE_FACTOR for i in sample.channels_data])
            fila+= 1

            
    def butter_bandpass(self,lowcut, highcut, fs, order=5):
            nyq = 0.5 * fs
            low = lowcut / nyq
            high = highcut / nyq
            sos = butter(order, [low, high], analog=False, btype='band', output='sos')
            return sos
    def butter_bandpass_filter(self,data, lowcut, highcut, fs, order=5):
        sos = self.butter_bandpass(lowcut, highcut, fs, order=order)
        y = sosfilt(sos, data)
        return y
        
    def updater_EEG(self):
        global data, colors,board,stm, LowF,HighF, model, switch, altura, fila, prueba
        

        if board.read_state==0:
            stm += 1
            if stm==50:
                #self.Errores("ULTRACORTEX DESCONECTADO")
                print("ULTRACORTEX DESCONECTADO")
        else:
            stm = 0

        print("Grabando")
        prueba = fila
        time.sleep(3)
        print("End record")
        self.label_errores.setText("")
                
        t_data = np.array(data[-1000:]).T #transpose data
        t_data = self.butter_bandpass_filter(t_data, LowF, HighF, 125, order=5)
        #print(t_data)
        #print(len(t_data[1,:]))
        mini = len(t_data[1,:])
        if mini == 1000:
            
            t_dataF = t_data[:,-625:]
            t_dataF = t_dataF.T
            #t_data = np.reshape(t_data,[625,16])
            #print(t_dataF.shape)
            t_dataF = np.expand_dims(t_dataF,0)
            #print(t_dataF.shape)
            predi = model.predict(t_dataF,0)
            prediccion = np.argmax(predi,axis=1)
            time.sleep(0.5)
            print(prediccion)
            if prediccion == 2:     #Ajuste del switch para cambiar movimiento con cejas
                if switch == 0:
                    switch = 1
                    print("eje x")
                    self.label_Pu_bla_1.setVisible(True)
                    self.label_Pu_ver_1.setVisible(False)
                    self.label_Pu_bla_2.setVisible(False)
                    self.label_Pu_ver_2.setVisible(True)
                    self.label_Pu_bla_3.setVisible(True)
                    self.label_Pu_ver_3.setVisible(False)

                    self.label_desc_izq_alt.setText("Cerrar el ojo izquierdo \n para bajar el drone")
                    self.label_desc_der_alt.setText("Cerrar el ojo derecho \n para elevar el drone")
                    self.label_desc_izq_fron.setText("")
                    self.label_desc_der_fron.setText("")
                    self.label_desc_izq_lat.setText("")
                    self.label_desc_der_lat.setText("")

                    self.label_arriba.setVisible(False)
                    self.label_abajo.setVisible(False)
                    self.label_frente.setVisible(True)
                    self.label_atras.setVisible(True)
                    self.label_izquierdo.setVisible(False)
                    self.label_derecha.setVisible(False)
                    
                elif switch == 1:
                    switch = 2
                    print("eje y")

                    self.label_Pu_bla_1.setVisible(True)
                    self.label_Pu_ver_1.setVisible(False)
                    self.label_Pu_bla_2.setVisible(True)
                    self.label_Pu_ver_2.setVisible(False)
                    self.label_Pu_bla_3.setVisible(False)
                    self.label_Pu_ver_3.setVisible(True)

                    self.label_desc_izq_alt.setText("Cerrar el ojo izquierdo para \n mover el drone hacia atras")
                    self.label_desc_der_alt.setText("Cerrar el ojo izquierdo para \n mover el drone hacia el frente")
                    self.label_desc_izq_fron.setText("")
                    self.label_desc_der_fron.setText("")
                    self.label_desc_izq_lat.setText("")
                    self.label_desc_der_lat.setText("")

                    self.label_arriba.setVisible(False)
                    self.label_abajo.setVisible(False)
                    self.label_frente.setVisible(False)
                    self.label_atras.setVisible(False)
                    self.label_izquierdo.setVisible(True)
                    self.label_derecha.setVisible(True)
                    
                else :
                    switch = 0
                    print("eje z")

                    self.label_Pu_bla_1.setVisible(False)
                    self.label_Pu_ver_1.setVisible(True)
                    self.label_Pu_bla_2.setVisible(True)
                    self.label_Pu_ver_2.setVisible(False)
                    self.label_Pu_bla_3.setVisible(True)
                    self.label_Pu_ver_3.setVisible(False)

                    self.label_desc_izq_alt.setText("Cerrar el ojo izquierdo para \n mover el drone a la izquierda")
                    self.label_desc_der_alt.setText("Cerrar el ojo izquierdo para \n mover el drone a la derecha")
                    self.label_desc_izq_fron.setText("")
                    self.label_desc_der_fron.setText("")
                    self.label_desc_izq_lat.setText("")
                    self.label_desc_der_lat.setText("")

                    self.label_arriba.setVisible(True)
                    self.label_abajo.setVisible(True)
                    self.label_frente.setVisible(False)
                    self.label_atras.setVisible(False)
                    self.label_izquierdo.setVisible(False)
                    self.label_derecha.setVisible(False)
                    
            elif prediccion == 3:
                print("No se ha detectado ningun gesto")
            else :
                if switch == 0:     #Si no mueve las cejas pregunta por la posicion del switch, la altura y gesto 
                    if altura == 0: # para ejecutar un movimiento
                        if prediccion == 1:
                            self.Despegar
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                for _ in range(3):
                                    try:
                                        mambo.safe_takeoff(8)
                                        break
                                    except TimeoutError:
                                        pass
                                print("taking off!")
                                
                                #mambo.safe_takeoff(8)
                                mambo.hover()              
                            print("up")
                            
                            altura = altura+2
                            self.label_arriba.setVisible(True)
                            self.label_abajo.setVisible(False)
                            
                        else :
                            self.Aterrizar
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                print("landing")
                                mambo.safe_land(5)
                                #mambo.disconnect()
                                #print("disconnect")
                            print("down")
                            self.label_arriba.setVisible(False)
                            self.label_abajo.setVisible(True)
                            
                    elif altura > 0:
                        if prediccion == 1:
                            self.Arriba
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                mambo.fly_direct(roll=0, pitch=0, yaw=0, vertical_movement=10, duration=1)
                            print("up")
                            altura = altura+1
                            self.label_arriba.setVisible(True)
                            self.label_abajo.setVisible(False)
                            
                        else :
                            self.Abajo
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                mambo.fly_direct(roll=0, pitch=0, yaw=0, vertical_movement=-10, duration=1)
                            print("donw")
                            altura = altura-1
                            self.label_arriba.setVisible(False)
                            self.label_abajo.setVisible(True)
                            
                elif switch == 1:
                    if prediccion == 1:
                            self.Adelante
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                mambo.fly_direct(roll=0, pitch=10, yaw=0, vertical_movement=0, duration=1)
                                mambo.smart_sleep(1)
                                mambo.hover()
                            print("fron")
                            self.label_frente.setVisible(True)
                            self.label_atras.setVisible(False)
                    else :
                            self.Atras
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                mambo.fly_direct(roll=0, pitch=-10, yaw=0, vertical_movement=0, duration=1)
                                mambo.smart_sleep(1)
                                mambo.hover()
                            print("atras")
                            self.label_frente.setVisible(False)
                            self.label_atras.setVisible(True)
                else :
                    if prediccion == 1:
                            self.Derecho
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                mambo.fly_direct(roll=-10, pitch=0, yaw=0, vertical_movement=0, duration=1)
                                mambo.smart_sleep(1)
                                mambo.hover()
                            print("rigth")
                            self.label_izquierdo.setVisible(False)
                            self.label_derecha.setVisible(True)
                    else :
                            self.Izquierdo
                            if (mambo.sensors.flying_state != "emergency"):
                                print(mambo.sensors.flying_state)
                                mambo.fly_direct(roll=10, pitch=0, yaw=0, vertical_movement=0, duration=1)
                                mambo.smart_sleep(1)
                                mambo.hover()

                            print("left")
                            self.label_izquierdo.setVisible(True)
                            self.label_derecha.setVisible(False)

         
    
import abajo_rc
import adelante_rc
import arriba_rc
import atras_rc
import cejas_rc
import derecha_rc
import drone_rc
import izquierda_rc
import ojos_rc
import punto_blanco_rc
import punto_verde_rc

# Metodo Arranque Ultracortex
def start_board_Ultracortex():
    global board

    try:
        print("cualquier cosa")
        board = OpenBCICyton( "COM3", daisy= True)
        board.start_stream(ui.save_data_EEG)
    
    except:
        #ui.Errores("DONGLE DESCONECTADO")
        print("DONGLE DESCONECTADO")

    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    hilo_conexion_ultracortes = threading.Thread(target=start_board_Ultracortex) 
    hilo_conexion_ultracortes.daemon = True
    hilo_conexion_ultracortes.start()
    time.sleep(3)
    
    mamboAddr = "d0:3a:a4:6b:e6:23"
    mambo = Mambo(mamboAddr, use_wifi=True)
    print("trying to connect")
    success = mambo.connect(num_retries=3)
    print("connected: %s" % success)
    
    timerEEG = QtCore.QTimer()
    timerEEG.timeout.connect(ui.updater_EEG)
    timerEEG.start(60)
    sys.exit(app.exec_())
